; ------------------------------------------
; Name:     luftdaten.info
; Date:     March 2017
; About:    A distributed monitoring platform collecting sensor data for the air quality monitoring community.
; Channel:  Transport/Format: MQTT/JSON and HTTP/CSV
; Storage:  InfluxDB
; See also: http://luftdaten.info
;           https://getkotori.org/docs/applications/luftdaten.info/
;           https://luftdaten.getkotori.org/grafana/dashboard/db/luftdaten-worldmap-prototype
;
; ------------------------------------------


; -----------------------------
; Data acquisition through MQTT
; -----------------------------
[luftdaten]
enable      = true
type        = application
realm       = luftdaten
mqtt_topics = luftdaten/#

app_factory = kotori.daq.application.composite:boot
#services    = kotori.daq.services.mig:MqttInfluxGrafanaService
services    = kotori.vendor.luftdaten.application:LuftdatenMqttInfluxGrafanaService
graphing    = kotori.vendor.luftdaten.application:LuftdatenGrafanaManager
strategy    = kotori.daq.strategy.wan:WanBusStrategy

# How often to log metrics
metrics_logger_interval = 60


; --------------------------------------------------------------------
; Data acquisition through HTTP
; https://getkotori.org/docs/handbook/acquisition/protocol/http.html
; https://getkotori.org/docs/applications/forwarders/http-to-mqtt.html
; --------------------------------------------------------------------
[luftdaten.http-acquisition]
enable          = true

type            = application
application     = kotori.io.protocol.forwarder:boot

realm           = luftdaten
source          = http:/api/luftdaten/{address:.*}/{slot:(data|event)} [POST]
target          = mqtt:/luftdaten/{address}/{slot}.json


; ----------------------------------------------------------------------
; Data export
; https://getkotori.org/docs/handbook/export/
; https://getkotori.org/docs/applications/forwarders/http-to-influx.html
; ----------------------------------------------------------------------
[luftdaten.data-export]
enable          = true

type            = application
application     = kotori.io.protocol.forwarder:boot

realm           = luftdaten
source          = http:/api/{realm:luftdaten}/{network:.*}/{gateway:.*}/{node:.*}/{slot:(data|event)}.{suffix} [GET]
target          = influxdb:/{database}?measurement={measurement}
transform       = kotori.daq.strategy.wan:WanBusStrategy.topology_to_storage,
                  kotori.io.protocol.influx:QueryTransformer.transform

